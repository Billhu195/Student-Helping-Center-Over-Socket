Script started on Fri 19 Oct 2018 05:39:55 AM EDT
]0;hujianhu@wolf:/h/u10/c7/00/hujianhu/Desktop/csc209/hujianhu/Lab6wolf:~/Desktop/csc209/hujianhu/Lab6$ gdb overflow
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) list 0
1       #include <stdio.h>
2       
3       #define SIZE 4
4       #define OVERFLOW 5
5       
6       int main() {
7           int index = 0;
8           int i;
9           int before[SIZE] = {10, 10, 10, 10};
10          int a[SIZE] = {0, 0, 0, 0};
(gdb) list
11          int after[SIZE] = {10, 10, 10, 10};
12      
13          printf("Address of the variables:\n");
14          for (index = 0; index < SIZE; index++) {
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
16          }
17          for (index = 0; index < SIZE; index++) {
18              printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
19          }
20          for (index = 0; index < SIZE; index++) {
(gdb) list
21              printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
22          }
23          printf("%lx -> &i\n", (unsigned long)&i);
24          printf("%lx -> &index\n", (unsigned long)&index);
25          printf("\n");
26      
27      
28          printf("Initial values:\n");
29          printf("i = %d\n", i);
30          printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) list
31          printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32          printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33          printf("\n");
34      
35      
36          for (i = 0; i < OVERFLOW; i++) {
37              a[i] = i * 10;
38              printf("i = %d\n", i);
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) bread[Kk 36
Breakpoint 1 at 0x40082f: file overflow.c, line 36.
(gdb) break 15
Breakpoint 2 at 0x4006ab: file overflow.c, line 15.
(gdb) run
Starting program: /h/u10/c7/00/hujianhu/Desktop/csc209/hujianhu/Lab6/overflow 
Address of the variables:

Breakpoint 2, main () at overflow.c:15
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
(gdb) continue
Continuing.
7fffffffe9f0 -> &after[0]

Breakpoint 2, main () at overflow.c:15
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
(gdb) continue
Continuing.
7fffffffe9f4 -> &after[1]

Breakpoint 2, main () at overflow.c:15
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
(gdb) next
7fffffffe9f8 -> &after[2]
14          for (index = 0; index < SIZE; index++) {
(gdb) break 36
Note: breakpoint 1 also set at pc 0x40082f.
Breakpoint 3 at 0x40082f: file overflow.c, line 36.
(gdb) conbreak 36[C[C[C[C[C[C[4Pnextcontinue
Continuing.

Breakpoint 2, main () at overflow.c:15
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
(gdb) continue
Continuing.
7fffffffe9fc -> &after[3]
7fffffffe9e0 -> &a[0]
7fffffffe9e4 -> &a[1]
7fffffffe9e8 -> &a[2]
7fffffffe9ec -> &a[3]
7fffffffe9d0 -> &before[0]
7fffffffe9d4 -> &before[1]
7fffffffe9d8 -> &before[2]
7fffffffe9dc -> &before[3]
7fffffffe9cc -> &i
7fffffffe9c8 -> &index

Initial values:
i = 65280
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 1, main () at overflow.c:36
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) next
37              a[i] = i * 10;
(gdb) next
38              printf("i = %d\n", i);
(gdb) next
i = 0
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) next
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) next
a = {0, 0, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) next
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) print &()a)f)t)t)[1P)e)r)[)])0])
$1 = (int *) 0x7fffffffe9f0
(gdb) print &(after[0])[1P[0])[1P[0])[1P[0])[1P[0])[C[C[1P])4])
$2 = (int *) 0x7fffffffe9f0
(gdb) quit
A debugging session is active.

        Inferior 1 [process 4299] will be killed.

Quit anyway? (y or n) y
]0;hujianhu@wolf:/h/u10/c7/00/hujianhu/Desktop/csc209/hujianhu/Lab6wolf:~/Desktop/csc209/hujianhu/Lab6$ exit
exit

Script done on Fri 19 Oct 2018 05:49:22 AM EDT
